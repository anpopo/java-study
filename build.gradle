plugins {
	id 'org.springframework.boot' version '2.5.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
}

group = 'java.study'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// 바이트 코드 조작 바이트버디
	implementation group: 'net.bytebuddy', name: 'byte-buddy', version: '1.11.22'

	// 다이나믹 클래스 생성을 위한 라이브러리
	implementation group: 'cglib', name: 'cglib', version: '3.3.0'


}

test {
	useJUnitPlatform()
}

jacoco {
	// JaCoCo 버전
	toolVersion = '0.8.5'

//  테스트결과 리포트를 저장할 경로 변경
//  default는 "$/jacoco"
//  reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
	reports {
		// 원하는 리포트를 켜고 끌 수 있습니다.
		html.enabled true
		xml.enabled false
		csv.enabled false

//  각 리포트 타입 마다 리포트 저장 경로를 설정할 수 있습니다.
//  html.destination file("$buildDir/jacocoHtml")
//  xml.destination file("$buildDir/jacoco.xml")
	}

	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	// 이 커버리지 기준은 이 글의 맨 아래에서 다시 설명하겠습니다.
	violationRules {

		rule {
			// 'element'가 없으면 프로젝트의 전체 파일을 합친 값을 기준으로 합니다.
			// 위의 리포트에서 'Total'로 표시된 부분입니다.
			limit {
				// 'counter'를 지정하지 않으면 default는 'INSTRUCTION'
				// 'value'를 지정하지 않으면 default는 'COVEREDRATIO'
				minimum = 0.30
			}
		}

		// 여러 룰을 생성할 수 있습니다.
		rule {
			// 룰을 간단히 켜고 끌 수 있습니다.
			enabled = true

			// 룰을 체크할 단위는 클래스 단위
			element = 'CLASS'

			// 브랜치 커버리지를 최소한 90% 만족시켜야 합니다.
//			limit {
//				counter = 'BRANCH'
//				value = 'COVEREDRATIO'
//				minimum = 0.90
//			}

			// 라인 커버리지를 최소한 50% 만족시켜야 합니다.
//			limit {
//				counter = 'LINE'
//				value = 'COVEREDRATIO'
//				minimum = 0.50
//			}

			// 빈 줄을 제외한 코드의 라인수를 최대 200라인으로 제한합니다.
//			limit {
//				counter = 'LINE'
//				value = 'TOTALCOUNT'
//				maximum = 200
//			}

			// 라인 커버리지를 최소한 50% 만족시켜야 합니다.
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.50
			}

			// 커버리지 체크를 제외할 클래스들
			excludes = [
			//      '*.test.*',
			'Q*.class*'
			]
		}
	}
}

test {
	jacoco {
		destinationFile = file("$buildDir/jacoco/jacoco.exec")
	}
}

test {
	jacoco {
		enabled = true
		destinationFile = file("$buildDir/jacoco/${name}.exec")
		includes = []
		excludes = []
		excludeClassLoaders = []
		includeNoLocationClasses = false
		sessionId = "<auto-generated value>"
		dumpOnExit = true
		classDumpDir = null
		output = JacocoTaskExtension.Output.FILE
		address = "localhost"
		port = 6300
		jmx = false
	}

	finalizedBy 'jacocoTestReport'
}

task testCoverage(type: Test) {
	group 'verification'
	description 'Runs the unit tests with coverage'

	dependsOn(':test',
			':jacocoTestReport',
			':jacocoTestCoverageVerification')

	tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
	tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}
